https://www.codewars.com/kata/5671d975d81d6c1c87000022

In a grid of 4 by 4 squares you want to place a skyscraper in each square with only some clues:

The height of the skyscrapers is between 1 and 4
No two skyscrapers in a row or column may have the same number of floors
A clue is the number of skyscrapers that you can see in a row or column from the outside
Higher skyscrapers block the view of lower skyscrapers located behind them

If no clue is available, add value 0
Each puzzle has only one possible solution
SolvePuzzle() returns matrix int[][]. 
The first indexer is for the row, the second indexer for the column. 
(Python: returns 4-tuple of 4-tuples)

###My Solutions:

###Naive solution but computationally quick solution:
###Some chunks of code are augmented versions of code from a backtracking sudoku solver
def solve_puzzle (clues):
    cache=[[],[[4,3,2,1],[4,3,1,2],[4,2,1,3],[4,2,3,1],[4,1,3,2],[4,1,2,3]],[[2,1,4,3],[3,1,4,2],[3,2,4,1],[3,4,1,2],[3,4,2,1],[3,1,2,4],[3,2,1,4],[2,4,1,3],[2,4,3,1],[1,4,2,3],[1,4,3,2]],[[2,3,4,1],[2,1,3,4],[2,3,1,4],[1,2,4,3],[1,3,4,2],[1,3,4,2]],[[1,2,3,4]]]
  
    grid=[[0,0,0,0] for x in range (0,4)]
    
    def findNextCellToFill(grid):
            for x in range(0,4):
                    for y in range(0,4):
                            if grid[x][y] == 0:
                                    return x,y
            return -1,-1

    def isValid(grid, i, j, e):
            rowOk = e not in [grid[i][x] for x in range(4)]
            if rowOk:
                    columnOk = e not in [grid[x][j] for x in range(4)]
                    if columnOk:                        
                            return True
            return False
    
    def sky(grid):
     g=[]
     for i in clues:
       g.append(i)
     if [grid[i][0] for i in range(0,4)] in cache[g[0]] or g[0]==0:
      if [grid[i][1] for i in range(0,4)] in cache[g[1]] or g[1]==0:
       if [grid[i][2] for i in range(0,4)] in cache[g[2]] or g[2]==0:
        if [grid[i][3] for i in range(0,4)] in cache[g[3]] or g[3]==0:
         if grid[0][::-1] in cache[g[4]] or g[4]==0:
          if grid[1][::-1] in cache[g[5]] or g[5]==0:
           if grid[2][::-1] in cache[g[6]] or g[6]==0:
            if grid[3][::-1] in cache[g[7]] or g[7]==0:
             if [grid[i][3] for i in range(0,4)][::-1] in cache[g[8]] or g[8]==0:
              if [grid[i][2] for i in range(0,4)][::-1] in cache[g[9]] or g[9]==0:
               if [grid[i][1] for i in range(0,4)][::-1] in cache[g[10]] or g[10]==0:
                if [grid[i][0] for i in range(0,4)][::-1] in cache[g[11]] or g[11]==0: 
                 if grid[3] in cache[g[12]] or g[12]==0:
                  if grid[2] in cache[g[13]] or g[13]==0:
                   if grid[1] in cache[g[14]] or g[14]==0:
                    if grid[0] in cache[g[15]] or g[15]==0:
                     return True
      return False
     
         
    def solveSudoku(grid):
            i,j = findNextCellToFill(grid)
            if i == -1:
                    return True
            for e in range(1,5):
                    if isValid(grid,i,j,e):
                            grid[i][j] = e
                            if solveSudoku(grid):
                                 if sky(grid):
                                    return True
                            grid[i][j] = 0
            return False
            
    if solveSudoku(grid):
     return tuple(tuple(i) for i in grid)

###A neater solution in terms of code but actually takes longer to solve:

def solve_puzzle (clues):
    
    grid=[[0,0,0,0] for x in range (0,4)]
    
    def findNextCellToFill(grid):
            for x in range(0,4):
                    for y in range(0,4):
                            if grid[x][y] == 0:
                                    return x,y
            return -1,-1

    def isValid(grid, i, j, e):
            rowOk = e not in [grid[i][x] for x in range(4)]
            if rowOk:
                    columnOk = e not in [grid[x][j] for x in range(4)]
                    if columnOk:                           
                            return True
            return False
    cache={}
    def count(L):
     if (''.join(str(i) for i in L)) in cache:
      return cache[(''.join(str(i) for i in L))]
     else:
      t=0
      for i in range(len(L)-1,0,-1):
       a=0
       for j in range(i,-1,-1):
        if L[j]>L[i]:
         a=1
       t+=a
      cache[(''.join(str(i) for i in L))]=len(L)-t
      return cache[(''.join(str(i) for i in L))]
    
    size=4
    g=[i for i in clues]
    
    def sky(grid):
     for j in range(0,size):
      if count([grid[i][j] for i in range(0,size)])!=g[j] and g[j]!=0: return False
      if count(grid[j][::-1])!=g[j+size] and g[j+size]!=0: return False
      if count([grid[i][j] for i in range(0,size)][::-1])!=g[3*size-1-j] and g[3*size-1-j]!=0: return False
      if count(grid[j])!=g[4*size-1-j] and g[4*size-1-j]!=0: return False
     return True              
      
     
         
    def solveSudoku(grid):
            i,j = findNextCellToFill(grid)
            if i == -1:
                    return True
            for e in range(1,5):
                    if isValid(grid,i,j,e):
                            grid[i][j] = e
                            if solveSudoku(grid):
                                 if sky(grid):
                                    return True
                            grid[i][j] = 0
            return False
            
    if solveSudoku(grid):
     return tuple(tuple(i) for i in grid) 