https://www.codewars.com/kata/54cb771c9b30e8b5250011d4

that takes 2 arguments - the number of eggs n and the number of trys m -
you should calculate maximum scyscrapper height (in floors),
in which it is guaranteed to find an exactly maximal floor from which that an egg won't crack it.

Which means,

You can throw an egg from a specific floor every try
Every egg has the same, certain durability - if they're thrown from a certain floor or below, they won't crack.
Otherwise they crack
You have n eggs and m tries
What is the maxmimum height, such that you can always determine which floor the target floor is when the target floor
can be any floor between 1 to this maximum height?
Examples

height 0 14 = 0
height 2 0  = 0
height 2 14 = 105
height 7 20 = 137979
Data range

n <= 20000
m <= 20000

###This problem is one of statistics: 
#http://ptri1.tripod.com/ note that when you devise the optimal strategy of what floor you drop your eggs from each time,
#they follow the hockey stick pattern on pascal's triangle. 
#the answer is the sum of the 2nd to n+1 integers in the m'th row of pascal's triangle,
#Or in other words, the sum of mCi for i on range(1,n+1). Once this statistical point has been realised, all that remains
#is to find a computationally efficient method of generating these values.
#The optimal formula to use: C(n,r)= product[(n-i+1)/i for i in range(1,r+1)] - easily derived from the formula C(n,r)=n!/(r!(n-r)!)
#This formula is useful here as in order to generate C(n,r) from C(n,r-1) all you need to do is divide by r and multiply by (n+1-r).
#So we can work our way along the m'th line of pascal's triangle only doing n multiplications and divisions in total!

###My Solution

def height(n,m):  
 ans=0
 r=1
 for i in range(1,n+1):
  r=int(int(r)*(m+1-i))
  r=r//i
  ans+=r
 return ans