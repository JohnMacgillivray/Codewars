https://www.codewars.com/kata/simple-maze

Kate constantly finds herself in some kind of a maze. Help her to find a way out!.

For a given maze and Kate's position find if there is a way out. Your function should return True or False.

Each maze is defined as a list of strings, where each char stays for a single maze "cell". ' ' (space) can be stepped on, '#' means wall and 'k' stays for Kate's starting position.

Kate can move left, up, right or down only.

There should be only one Kate in a maze. In any other case you have to raise an exception.

Example input

['# ##',
 '# k#',
 '####']
Example output

True

Example input

['####'.
 '# k#',
 '####']
Example output

False

###My solution:

def has_exit(maze):
    Maze=[]
    for i in range(0,len(maze)):
       Maze.append(list(maze[i]))
    start=[]
    ans=False
    p=len(Maze)-1
    q=len(Maze[0])-1
    for i in range(0,len(Maze)):
     if 'k' in Maze[i]:
      start.append([i, Maze[i].index('k')])   
    if len(start)>1:
     raise Exception("There should no be multiple Kates")
    else:
     if len(start)==0:
      raise Exception("There should be one Kate")
     else:
      for r in range(0,10):
       for j in range(0,len(start)): 
        if 0<start[j][0]<p:
         if 0<start[j][1]<q:
          if Maze[start[j][0]][start[j][1]+1]==' ':
           start.append([start[j][0],start[j][1]+1])
          if Maze[start[j][0]][start[j][1]-1]==' ':
           start.append([start[j][0],start[j][1]-1])
          if Maze[start[j][0]+1][start[j][1]]==' ':
           start.append([start[j][0]+1,start[j][1]])
          if Maze[start[j][0]-1][start[j][1]]==' ':
           start.append([start[j][0]-1,start[j][1]])
       for k in start:
        if k[0]==0 or k[0]==p or k[1]==0 or k[1]==q:
         ans=True
         break
     return ans