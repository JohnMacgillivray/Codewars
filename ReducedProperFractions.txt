https://www.codewars.com/kata/55b7bb74a0256d4467000070

If n is the numerator and d the denominator of a fraction, that fraction is defined a (reduced) proper fraction if and only if GCD(n,d)==1.

For example 5/16 is a proper fraction, while 6/16 is not, as both 6 and 16 are divisible by 2, thus the fraction can be reduced to 3/8.

Now, if you consider a given number d, how many proper fractions can be built using d as a denominator?

For example, let's assume that d is 15: you can build a total of 8 different proper fractions between 0 and 1 with it: 1/15, 2/15, 4/15, 7/15, 8/15, 11/15, 13/15 and 14/15.

You are to build a function that computes how many proper fractions you can build with a given denominator.

###My Solution:

def proper_fractions(y):
 if y==1:
  return 0
 if y>1:
    def primfac(n):
     g=[]
     for i in range(2,int(n**0.5)+1):
        if i<=n:
         if n%i==0:
          g.append(i)
          while n%i==0:
            n=n/i
        else:
          if n>1:
            g.append(n)
            break
     if n>1:
      g.append(n)
     return g
    z=1
    for i in primfac(y):
     f=(float(float(1)-float(1)/float(i)))
     z*=f
    if float(z*y)%float(1)>0.5:
     return int(y*z)+1
    else:
     return int(y*z)