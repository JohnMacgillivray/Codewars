https://www.codewars.com/kata/can-you-really-count-divisors

In this Kata we focus on finding a sum S(n) which is the total number of divisors taken for all natural numbers less or equal to n. More formally, we investigate the sum of n components denoted by d(1) + d(2) + ... + d(n) in which for any i starting from 1 up to n the value of d(i) tells us how many distinct numbers divide i without a remainder.

Your solution should work for possibly large values of n without a timeout. Assume n to be greater than zero and not greater than 999 999 999 999 999. Brute force approaches will not be feasible options in such cases. It is fairly simple to conclude that for every n>1 there holds a recurrence S(n) = S(n-1) + d(n) with initial case S(1) = 1.

For example:
S(1) = 1
S(2) = 3
S(3) = 5
S(4) = 8
S(5) = 10

###My Final Solution
def count_divisors(n): return 2*sum([n//i for i in range(1,int(n**.5)+1)])-int(n**.5)**2

###My Initial Solution
def tri(y):
 return int((y/2)*(y+1))
def count_divisors(n):
 ans=int(n**.5)-2*tri(int(n**.5))
 for i in range(1,int(n**.5)+1):
   ans+=2*int(n/i)
 return ans

